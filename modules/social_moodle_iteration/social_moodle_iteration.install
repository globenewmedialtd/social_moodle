<?php

/**
 * Add new view for iterations:
 * views.view.group_iterations
 */
function social_moodle_iteration_update_8001() {

  $configs_to_install = [
    'views.view.group_iterations',
  ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config('views.view.group_iterations', '8001', 'social_moodle_iteration');
  }

}

/**
 * Set field to non-required:
 * field.field.node.iteration.field_iteration_date
 */
function social_moodle_iteration_update_8002() {

  $configs_to_install = [
    'field.field.node.iteration.field_iteration_date'
  ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config('field.field.node.iteration.field_iteration_date', '8002', 'social_moodle_iteration');
  }

}

/**
 * Update Language Version in Iteration and delete body field
 */
function social_moodle_iteration_update_8003() {

  $configs_to_install = [
    'field.storage.node.field_language_version',
    'field.field.node.iteration.field_language_version',
    'core.entity_form_display.node.iteration.default',
    'core.entity_view_display.node.iteration.default',
  ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config('field.storage.node.field_language_version', '8003', 'social_moodle_iteration');
    _social_moodle_iteration_update_or_install_config('field.field.node.iteration.field_language_version', '8003', 'social_moodle_iteration');
    _social_moodle_iteration_update_or_install_config('core.entity_form_display.node.iteration', '8003', 'social_moodle_iteration');
    _social_moodle_iteration_update_or_install_config('core.entity_view_display.node.iteration', '8003', 'social_moodle_iteration');
  }

  // Delete the body field
  \Drupal::configFactory()->getEditable('field.field.node.iteration.body')->delete();

}


/**
 * Fix A non-existent config entity name returned by FieldStorageConfigInterface::getBundles(): 
 * entity type: node, bundle: iteration, field name: body
 */

function social_moodle_iteration_update_8004() {
  ## Fixes:
  ## A non-existent config entity name returned by FieldStorageConfigInterface::getBundles(): entity type: node, bundle: iteration, field name: body
  $entity_type = 'node';
  $bundle = 'iteration';
  $field_name = 'body';

  $key_value_factory = \Drupal::service('keyvalue');
  $field_map_kv_store = $key_value_factory->get('entity.definitions.bundle_field_map');
  $map = $field_map_kv_store->get($entity_type);
  // Remove the body field from the bundle iteration.
  unset($map[$field_name]['bundles'][$bundle]);
  $field_map_kv_store->set($entity_type, $map);
}

/**
 * Make field_language version required
 */
function social_moodle_iteration_update_8005() {

  $configs_to_install = [
    'field.field.node.iteration.field_language_version',
  ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config($config_to_install, '8005', 'social_moodle_iteration');
  }

}

/**
 * Add new fields:
 * field_iteration_managers, field_show_date (Show date on enrollment card)
 */
function social_moodle_iteration_update_8006() {

  $configs_to_install = [
    'field.storage.node.field_iteration_managers',
    'field.storage.node.field_show_date',
    'field.field.node.iteration.field_iteration_managers',
    'field.field.node.iteration.field_show_date',
    'core.entity_form_display.node.iteration.default',
    'core.entity_view_display.node.iteration.default',
   ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config($config_to_install, '8006', 'social_moodle_iteration');
  }

}

/**
 * Changed permission to group managers only
 * views.view.group_iterations
 */
function social_moodle_iteration_update_8007() {

  $configs_to_install = [
    'views.view.group_iterations',
  ];

  foreach ($configs_to_install as $config_to_install) {
    _social_moodle_iteration_update_or_install_config($config_to_install, '8007', 'social_moodle_iteration');
  }

}

function _social_moodle_iteration_update_or_install_config( String $prefix, String $update_id, String $module) {
  $updated = [];
  $created = [];

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $files = glob(drupal_get_path('module', $module) . '/config/update_' . $update_id. '/' . $prefix . '*.yml') ;
  foreach ($files as $file) {
    $raw = file_get_contents($file);
    $value = \Drupal\Component\Serialization\Yaml::decode($raw);
    if(!is_array($value)) {
      throw new \RuntimeException(sprintf('Invalid YAML file %s'), $file);
    }

    $type = $config_manager->getEntityTypeIdByName(basename($file));
    $entity_manager = $config_manager->getEntityManager();
    $definition = $entity_manager->getDefinition($type);
    $id_key = $definition->getKey('id');
    $id = $value[$id_key];

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
    $entity_storage = $entity_manager->getStorage($type);
    $entity = $entity_storage->load($id);
    if ($entity) {
      $entity = $entity_storage->updateFromStorageRecord($entity, $value);
      $entity->save();
      $updated[] = $id;
    }
    else {
      $entity = $entity_storage->createFromStorageRecord($value);
      $entity->save();
      $created[] = $id;
    }
  }

  return [
    'udpated' => $updated,
    'created' => $created,
  ];
}

