<?php

/**
 * @file
 * Contains social_moodle_enrollment.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\social_moodle_enrollment\IterationEnrollmentInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\group\GroupMembershipLoaderInterface;
use Drupal\group\Entity\GroupInterface;


function social_moodle_enrollment_get_supervisor_users($supervisor) {

	$users = FALSE;

	$database = \Drupal::database();
	$query = $database->select('profile', 'p');
	$query->fields('p', ['uid']);
	$query->join('profile__field_supervisor', 'ps', 'p.profile_id = ps.entity_id');
	$query->condition('ps.field_supervisor_target_id', $supervisor, '=');
	$result = $query->execute();

	if ($result) {
    foreach($result as $value) {
	    $users[$value->uid] = $value->uid;
    }
	}
	
	return $users;

}

function social_moodle_enrollment_get_users_supervisor($user) {

	$supervisor = FALSE;

	$database = \Drupal::database();
	$query = $database->select('profile', 'p');
	$query->fields('ps', ['field_supervisor_target_id']);
	$query->join('profile__field_supervisor', 'ps', 'p.profile_id = ps.entity_id');
	$query->condition('p.uid', $user, '=');
	$result = $query->execute();

	if ($result) {
    foreach($result as $value) {
      $supervisor = $value->field_supervisor_target_id;
    }
	}
	
	return $supervisor;

}

/**
 * Check if the user is allowed to manage Enrollments.
 *
 * @param \Drupal\node\NodeInterface|null $node
 *   The node the current user could be organizer of.
 * @param bool $skip_trusted_roles
 *   Should we skip CM/SM with the manage everything enrollments.
 *
 * @return bool
 *   If the user is actually a manager or organizer.
 */
function social_moodle_enrollment_iteration_manager_or_organizer(NodeInterface $node = NULL, $skip_trusted_roles = FALSE) {
  $social_iteration_manager_or_organizer = &drupal_static(__FUNCTION__);

  if (!isset($social_iteration_manager_or_organizer)) {
    $account = \Drupal::currentUser();

    // Allow if user has the manage everything permission.
    // We can skip this to make sure we truly only check organizer & managers
    // used for context in notifications.
    if ($skip_trusted_roles === FALSE && $account->hasPermission('manage everything iteration enrollments')) {
      $result = TRUE;
    }

    if (!$node && !isset($result)) {
      // Get the current iteration node.
      $node = social_moodle_iteration_get_current_iteration();

      // If there's no node, we might be looking at an iteration enrollment.
      if (!$node) {
        // If we are altering / deleting an Iteration Enrollment check if user
        // is manager or organizer from the referenced node.
        $iteration_enrollment = \Drupal::routeMatch()
          ->getParameter('iteration_enrollment');

        if ($iteration_enrollment instanceof IterationEnrollmentInterface) {
          $node = $iteration_enrollment->field_iteration->entity;
        }
      }
    }

    // If we now have a node we can check if there are iteration managers.
    if ($node instanceof NodeInterface && !isset($result) && $node->bundle() === 'iteration') {
      // The iteration owner has access.
      if ($node->getOwnerId() === $account->id()) {
        $result = TRUE;
      }

      // Check if the user is an iteration manager/organizer.
      if (!isset($result) && $node->hasField('field_iteration_managers') && !$node->field_iteration_managers->isEmpty()) {
        foreach ($node->field_iteration_managers->getValue() as $value) {
          if ($value && $value['target_id'] === $account->id()) {
            $result = TRUE;
            break;
          }
        }
      }
    }

    // No result means the user does not have access.
    if (!isset($result)) {
      $result = FALSE;
    }

    $social_iteration_manager_or_organizer = $result;
  }

  return $social_iteration_manager_or_organizer;
}

function social_moodle_enrollment_iteration_enrollment_insert(EntityInterface $entity) {
  // Check only enrolled records
  if ($entity->field_enrollment_status->value == 1) {
    // Get the nid of the iteration
    $iteration = $entity->field_iteration->getEntity();
    $nid = $iteration->id();
    $uid = $entity->getOwnerId();

    
    // Get Account
    $account = \Drupal::entityTypeManager()
        ->getStorage('user')
        ->load($uid);
    
    $groupHelperService = \Drupal::service('social_group.helper_service');
    $entityTypeManager = \Drupal::service('entity_type.manager');

    // We need to get the group via groupHelperService
    $gid_from_entity = $groupHelperService->getGroupFromEntity([
      'target_type' => 'node',
      'target_id' => $nid,
    ]);

  
    if ($gid_from_entity !== NULL) {
      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $entityTypeManager
        ->getStorage('group')
        ->load($gid_from_entity);
    }

    if ($group instanceof GroupInterface) {

      $is_member = $group->getMember($account) instanceof GroupMembershipLoaderInterface;

      // Only add member if not already a member
      if (!$is_member) {    
        $group->addMember($account);
      }

    }

  }

}





